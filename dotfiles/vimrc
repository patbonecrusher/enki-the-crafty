" -----------------------------------------------------------------------------
" Vundle plugin stuff.  After adding new plugin, run :PluginInstall
" -----------------------------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required
set encoding=utf-8            " to load powerline font

" set the runtime path to include Vundle and initialize
" set rtp+=~/.vim/bundle/Vundle.vim
" call vundle#begin()

" let Vundle manage Vundle, required
" Plugin 'VundleVim/Vundle.vim'
" Plugin 'pangloss/vim-javascript'
" Plugin 'othree/html5.vim'
" Plugin 'othree/javascript-libraries-syntax.vim'
" Plugin 'vim-airline/vim-airline'		" Better status bar
" Plugin 'vim-airline/vim-airline-themes'
" Plugin 'flazz/vim-colorschemes'
" Plugin 'wakatime/vim-wakatime'
" Plugin 'preservim/nerdtree'

" call vundle#end()            " required
filetype plugin indent on    " required

call plug#begin('~/.vim/plugged')
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'davidhalter/jedi-vim'
call plug#end()

" Run vim +PlugInstall

" Put your non-Plugin stuff after this line
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" execute pathogen#infect()
syntax on
" call pathogen#helptags()
" -----------------------------------------------------------------------------


" -----------------------------------------------------------------------------
"  The following is to be able to paste in iterm (not in vim)
"  and to ensure that the code will not try to be indented
"  It will paste as is
" -----------------------------------------------------------------------------
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction
" -----------------------------------------------------------------------------

:set modeline
:set showmode
:set nowrap
:set nowrapscan
:set ruler
:set showmatch
:set smartindent
:set nohlsearch
:set formatoptions+=ro
:set backspace=2
:set background=dark
:set number
:set wildmenu
:set wildmode=list:longest,full
" set guifont=Source\ Code\ Pro\ for\ Powerline "make sure to escape the spaces in the name properly
set guifont=MesloLGS\ NF "make sure to escape the spaces in the name properly

" -----------------------------------------------------------------------------
"  Keyboard shortcut mapping.
" -----------------------------------------------------------------------------
map <C-c> :NERDTreeToggle<CR>
map <C-r> gg=G<CR>
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" Other cruft.
" -----------------------------------------------------------------------------
" Make vim turn *off* expandtab for files named Makefile or makefile
" We need the tab literal
:autocmd BufNewFile,BufRead [Mm]akefile* set noexpandtab

" Make vim recognize a file ending in ".template" be a C++ source file
:autocmd BufNewFile,BufRead *.template set filetype=cpp

" Make vim use 8 character tabstops and recognize # as a start-of-comment token
" in assembly source files
:autocmd BufNewFile,BufRead *.s set tabstop=8 noexpandtab | syn match asmComment "#"
" -----------------------------------------------------------------------------

set clipboard=unnamed
" set statusline=%{fugitive#statusline()}
"
" let g:airline_left_sep='>'

" -----------------------------------------------------------------------------
" vim-airline stuff (bar at the bottom)
" -----------------------------------------------------------------------------
let g:airline_powerline_fonts = 1	" Required to use powerfont
set laststatus=2			" Required for the bar to show
set ttimeoutlen=50			" Required for the bar to show
set t_Co=256				" This will enable background color
" -----------------------------------------------------------------------------

" -----------------------------------------------------------------------------
" Color stuff
" -----------------------------------------------------------------------------
if v:version < 700 || exists('loaded_switchcolor') || &cp 
          finish
endif
  
let loaded_switchcolor = 1 

let paths = split(globpath(&runtimepath, 'colors/*.vim'), "\n")
let s:swcolors = map(paths, 'fnamemodify(v:val, ":t:r")')
let s:swskip = [ '256-jungle', '3dglasses', 'calmar256-light', 'coots-beauty-256', 'grb256' ]
let s:swback = 0    " background variants light/dark was not yet switched
let s:swindex = 0 

function! SwitchColor(swinc)
  " if have switched background: dark/light
  if (s:swback == 1)
          let s:swback = 0 
          let s:swindex += a:swinc
          let i = s:swindex % len(s:swcolors)

          " in skip list
          if (index(s:swskip, s:swcolors[i]) == -1) 
                  execute "colorscheme " . s:swcolors[i]
          else
                  return SwitchColor(a:swinc)
          endif

  else
          let s:swback = 1 
          if (&background == "light")
                  execute "set background=dark"
          else
                  execute "set background=light"
          endif

          " roll back if background is not supported
          if (!exists('g:colors_name'))
                  return SwitchColor(a:swinc)
          endif
  endif

  " show current name on screen. :h :echo-redraw
  redraw
  execute "colorscheme"
endfunction

map <F8>        :call SwitchColor(1)<CR>
imap <F8>   <Esc>:call SwitchColor(1)<CR>

"map <C-c>  :call SwitchColor(1)<CR>

map <S-F8>      :call SwitchColor(-1)<CR>
imap <S-F8> <Esc>:call SwitchColor(-1)<CR>
" -----------------------------------------------------------------------------

if has("autocmd")
  autocmd BufRead,BufNewFile Makefile*  :set noexpandtab
  autocmd BufRead,BufNewFile mirror.conf    :set noexpandtab
  autocmd BufRead,BufNewFile *.html*    :set shiftwidth=2
  autocmd BufRead,BufNewFile diff_files :set autowrite
  autocmd BufRead,BufNewFile lbnamed*   :set ft=perl
  autocmd BufRead,BufNewFile *.t        :set ft=perl
  autocmd BufRead,BufNewFile *.py       :set ts=4
endif

" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTreeToggle | endif
